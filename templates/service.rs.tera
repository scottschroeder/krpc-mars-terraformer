{%- import "macros.tera" as macros -%}
use krpc_mars::krpc as krpc;
use krpc_mars::protobuf as protobuf;
use krpc_mars::CallHandle;
use krpc_mars::codec::RPCEncodable;
use krpc_mars::codec::RPCExtractable;

{% for include in includes %}
use {{ include }};
{%- endfor %}

use std::fmt;


{% for name, def in classes %}
#[derive(Clone)]
pub struct {{ name }} {
    pub id: u32,
}

impl fmt::Debug for {{ name }} {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{{ name }}({})", self.id)
    }
}

impl RPCEncodable for {{ name }} {
    fn encode(&self, output: &mut protobuf::CodedOutputStream) -> Result<(), protobuf::ProtobufError> {
        self.id.encode(output)
    }
}

impl RPCExtractable for {{ name }} {
    fn extract_value(input: &mut protobuf::CodedInputStream) -> Result<Self, protobuf::ProtobufError> {
        let id = RPCExtractable::extract_value(input)?;
        Ok({{ name }} { id })
    }
}

{% endfor %}

{% for name, def in enumerations %}
#[derive(Debug, Copy, Clone)]
pub enum {{ name }} {
{%- for val_def in def.values %}
    {{ val_def.name }} = {{ val_def.value }},
{%- endfor %}
}

impl From<i32> for {{ name }} {
    #[inline]
    fn from(source: i32) -> Self {
        match source {
        {%- for val_def in def.values %}
            {{ val_def.value }} => {{ name }}::{{ val_def.name }},
        {%- endfor %}
            _ => panic!("Could not convert '{}' to a {{ service_name }}::{{ name }}", source),
        }
    }
}

impl RPCEncodable for {{ name }} {
    fn encode(&self, output: &mut protobuf::CodedOutputStream) -> Result<(), protobuf::ProtobufError> {
        (*self as i32).encode(output)
    }
}

impl RPCExtractable for {{ name }} {
    fn extract_value(input: &mut protobuf::CodedInputStream) -> Result<Self, protobuf::ProtobufError> {
        let value : i32 = RPCExtractable::extract_value(input)?;
        Ok({{ name }}::from(value))
    }
}
{% endfor %}

{% for proc in procedures %}
/// {{ proc.doc }}
pub fn {{ proc.name }}({{ macros::format_params(params=proc.params) }}) -> CallHandle<{{ proc.return.type | default(value='()') }}> {
    let mut proc_call = krpc::ProcedureCall::new();
    proc_call.set_service(String::from("{{ service_name }}"));
    proc_call.set_procedure(String::from("{{ proc.rpc_name }}"));

        {%- if proc.params | length > 0 %}

    let mut arguments = protobuf::RepeatedField::<krpc::Argument>::new();

            {%- for param in proc.params %}

    let mut arg{{ loop.index0 }} = krpc::Argument::new();
    arg{{ loop.index0 }}.set_position({{ loop.index0 }});
    arg{{ loop.index0 }}.set_value(p_{{ param.name }}.encode_to_bytes().unwrap());
    arguments.push(arg{{ loop.index0 }});
            {%- endfor %}
    proc_call.set_arguments(arguments);
        {%- endif %}

    CallHandle::new(proc_call)
}
{% endfor %}

{% for impl_name, impl_methods in methods -%}
impl {{ impl_name }} {
{%- for method in impl_methods %}
    /// {{ method.doc }}
    pub fn {{ method.name }}(&self, {{ macros::format_params(params=method.params) }}) -> CallHandle<{{ method.return.type | default(value='()') }}> {
        let mut proc_call = krpc::ProcedureCall::new();
        proc_call.set_service(String::from("{{ service_name }}"));
        proc_call.set_procedure(String::from("{{ method.rpc_name }}"));

        let mut arguments = protobuf::RepeatedField::<krpc::Argument>::new();

        let mut arg0 = krpc::Argument::new();
        arg0.set_position(0);
        arg0.set_value(self.id.encode_to_bytes().unwrap());
        arguments.push(arg0);
            {%- for param in method.params %}

        let mut arg{{ loop.index }} = krpc::Argument::new();
        arg{{ loop.index }}.set_position({{ loop.index }});
        arg{{ loop.index }}.set_value(p_{{ param.name }}.encode_to_bytes().unwrap());
        arguments.push(arg{{ loop.index }});
            {%- endfor %}
        proc_call.set_arguments(arguments);

        CallHandle::new(proc_call)
    }
{% endfor -%}
}
{% endfor %}
